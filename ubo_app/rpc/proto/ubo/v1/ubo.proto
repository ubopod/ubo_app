syntax = "proto3";

package ubo.v1;

import "package_info/v1/package_info.proto";

message BaseMenu {
  option (package_info.v1.package_name) = "ubo_gui.menu.types";
  optional string meta_field_package_name_ubo_gui_dot_menu_dot_types = 1000;
  string title = 2;
  repeated Item items = 3;
  optional string placeholder = 4;
}

message HeadedMenu {
  option (package_info.v1.package_name) = "ubo_gui.menu.types";
  optional string meta_field_package_name_ubo_gui_dot_menu_dot_types = 1000;
  string heading = 2;
  string sub_heading = 3;
  string title = 4;
  repeated Item items = 5;
  optional string placeholder = 6;
}

message HeadlessMenu {
  option (package_info.v1.package_name) = "ubo_gui.menu.types";
  optional string meta_field_package_name_ubo_gui_dot_menu_dot_types = 1000;
  string title = 2;
  repeated Item items = 3;
  optional string placeholder = 4;
}

message Item {
  option (package_info.v1.package_name) = "ubo_gui.menu.types";
  optional string meta_field_package_name_ubo_gui_dot_menu_dot_types = 1000;
  optional string key = 2;
  optional string label = 3;
  optional string color = 4;
  optional string background_color = 5;
  optional string icon = 6;
  optional bool is_short = 7;
  optional float opacity = 8;
  optional float progress = 9;
}

message ActionItem {
  option (package_info.v1.package_name) = "ubo_gui.menu.types";
  optional string meta_field_package_name_ubo_gui_dot_menu_dot_types = 1000;
  optional string key = 2;
  optional string label = 3;
  optional string color = 4;
  optional string background_color = 5;
  optional string icon = 6;
  optional bool is_short = 7;
  optional float opacity = 8;
  optional float progress = 9;
}

message ApplicationItem {
  option (package_info.v1.package_name) = "ubo_gui.menu.types";
  optional string meta_field_package_name_ubo_gui_dot_menu_dot_types = 1000;
  string application = 2;
  optional string key = 3;
  optional string label = 4;
  optional string color = 5;
  optional string background_color = 6;
  optional string icon = 7;
  optional bool is_short = 8;
  optional float opacity = 9;
  optional float progress = 10;
}

message SubMenuItem {
  option (package_info.v1.package_name) = "ubo_gui.menu.types";
  optional string meta_field_package_name_ubo_gui_dot_menu_dot_types = 1000;
  Menu sub_menu = 2;
  optional string key = 3;
  optional string label = 4;
  optional string color = 5;
  optional string background_color = 6;
  optional string icon = 7;
  optional bool is_short = 8;
  optional float opacity = 9;
  optional float progress = 10;
}

message Subscribable {
  option (package_info.v1.package_name) = "ubo_gui.menu.types";
  optional string meta_field_package_name_ubo_gui_dot_menu_dot_types = 1000;
}

message Menu {
  oneof menu {
    HeadedMenu headed_menu = 1;
    HeadlessMenu headless_menu = 2;
  }
}
enum SettingsCategory {
  SETTINGS_CATEGORY_UBO_APP_DOT_STORE_DOT_CORE_DOT_TYPES_UNSPECIFIED = 0;
  SETTINGS_CATEGORY_NETWORK = 1;
  SETTINGS_CATEGORY_REMOTE = 2;
  SETTINGS_CATEGORY_SYSTEM = 3;
  SETTINGS_CATEGORY_SPEECH = 4;
  SETTINGS_CATEGORY_DOCKER = 5;
}

enum MenuScrollDirection {
  MENU_SCROLL_DIRECTION_UBO_APP_DOT_STORE_DOT_CORE_DOT_TYPES_UNSPECIFIED = 0;
  MENU_SCROLL_DIRECTION_UP = 1;
  MENU_SCROLL_DIRECTION_DOWN = 2;
}

message MainAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message UpdateLightDMState {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  bool is_active = 2;
  bool is_enable = 3;
}

message RegisterAppAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  Item menu_item = 2;
  optional string service = 3;
  optional string key = 4;
}

message RegisterRegularAppAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  optional int64 priority = 2;
  Item menu_item = 3;
  optional string service = 4;
  optional string key = 5;
}

message DeregisterRegularAppAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  optional string service = 2;
  optional string key = 3;
}

message RegisterSettingAppAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  SettingsCategory category = 2;
  optional int64 priority = 3;
  Item menu_item = 4;
  optional string service = 5;
  optional string key = 6;
}

message PowerAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message PowerOffAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message RebootAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message SetMenuPathAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  repeated string path = 2;
  int64 depth = 3;
}

message SetAreEnclosuresVisibleAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  optional bool is_header_visible = 2;
  optional bool is_footer_visible = 3;
}

message MenuAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message MenuGoBackAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message MenuGoHomeAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message MenuChooseByIconAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  string icon = 2;
}

message MenuChooseByLabelAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  string label = 2;
}

message MenuChooseByIndexAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  int64 index = 2;
}

message MenuScrollAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  MenuScrollDirection direction = 2;
}

message OpenApplicationAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  string application = 2;
}

message CloseApplicationAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  string application = 2;
}

message MainEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message InitEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message MenuEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message MenuGoBackEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message MenuGoHomeEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message MenuChooseByIconEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  string icon = 2;
}

message MenuChooseByLabelEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  string label = 2;
}

message MenuChooseByIndexEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  int64 index = 2;
}

message MenuScrollEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  MenuScrollDirection direction = 2;
}

message OpenApplicationEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  string application = 2;
}

message CloseApplicationEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  string application = 2;
}

message PowerEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message PowerOffEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message RebootEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message ScreenshotEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message SnapshotEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message ToggleRecordingAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message StoreRecordedSequenceEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
  repeated Action recorded_sequence = 2;
}

message ReplayRecordedSequenceAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message ReplayRecordedSequenceEvent {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message ReportReplayingDoneAction {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;
}

message MainState {
  option (package_info.v1.package_name) = "ubo_app.store.core.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_core_dot_types = 1000;

  message Path {
    repeated string items = 1;
  }

  message AppsItemsPrioritiesDict {
    map<string, int64> items = 1;
  }

  message SettingsItemsPrioritiesDict {
    map<string, int64> items = 1;
  }
  message RecordedSequence {
    repeated Action items = 1;
  }
  optional Menu menu = 2;
  optional Path path = 3;
  optional int64 depth = 4;
  optional bool is_header_visible = 5;
  optional bool is_footer_visible = 6;
  optional AppsItemsPrioritiesDict apps_items_priorities = 7;
  optional SettingsItemsPrioritiesDict settings_items_priorities = 8;
  optional bool is_recording = 9;
  optional bool is_replaying = 10;
  optional RecordedSequence recorded_sequence = 11;
}

message DispatchItem {
  option (package_info.v1.package_name) = "ubo_app.store.dispatch_action";
  optional string meta_field_package_name_ubo_app_dot_store_dot_dispatch_action = 1000;
  Action store_action = 2;
  optional string key = 3;
  optional string label = 4;
  optional string color = 5;
  optional string background_color = 6;
  optional string icon = 7;
  optional bool is_short = 8;
  optional float opacity = 9;
  optional float progress = 10;
}

enum InputFieldType {
  INPUT_FIELD_TYPE_UBO_APP_DOT_STORE_DOT_INPUT_DOT_TYPES_UNSPECIFIED = 0;
  INPUT_FIELD_TYPE_LONG = 1;
  INPUT_FIELD_TYPE_TEXT = 2;
  INPUT_FIELD_TYPE_PASSWORD = 3;
  INPUT_FIELD_TYPE_NUMBER = 4;
  INPUT_FIELD_TYPE_CHECKBOX = 5;
  INPUT_FIELD_TYPE_COLOR = 6;
  INPUT_FIELD_TYPE_SELECT = 7;
  INPUT_FIELD_TYPE_FILE = 8;
  INPUT_FIELD_TYPE_DATE = 9;
  INPUT_FIELD_TYPE_TIME = 10;
}

enum InputMethod {
  INPUT_METHOD_UBO_APP_DOT_STORE_DOT_INPUT_DOT_TYPES_UNSPECIFIED = 0;
  INPUT_METHOD_CAMERA = 1;
  INPUT_METHOD_WEB_DASHBOARD = 2;
  INPUT_METHOD_ALL = 3;
}

message InputResult {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;

  message FilesValue {
    oneof files_value {
      bytes bytes = 1;
    }
  }
  map<string, string> data = 2;
  map<string, FilesValue> files = 3;
  InputMethod method = 4;
}

message InputFieldDescription {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;

  message Options {
    repeated string items = 1;
  }
  string name = 2;
  string label = 3;
  InputFieldType type = 4;
  optional string description = 5;
  optional string title = 6;
  optional string pattern = 7;
  optional string default = 8;
  optional Options options = 9;
  optional bool required = 10;
}

message InputDescription {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;

  message Fields {
    repeated InputFieldDescription items = 1;
  }
  string title = 2;
  string prompt = 3;
  optional ReadableInformation extra_information = 4;
  string id = 5;
  string pattern = 6;
  optional Fields fields = 7;
}

message InputAction {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;
}

message InputDemandAction {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;
  InputDescription description = 2;
  InputMethod method = 3;
}

message InputResolveAction {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;
  string id = 2;
}

message InputCancelAction {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;
  string id = 2;
}

message InputProvideAction {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;
  string value = 2;
  InputResult result = 3;
  string id = 4;
}

message InputResolveEvent {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;
  string id = 2;
}

message InputCancelEvent {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;
  string id = 2;
}

message InputProvideEvent {
  option (package_info.v1.package_name) = "ubo_app.store.input.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_input_dot_types = 1000;
  string value = 2;
  InputResult result = 3;
  string id = 4;
}

message SettingsAction {
  option (package_info.v1.package_name) = "ubo_app.store.settings.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_settings_dot_types = 1000;
}

message SettingsToggleDebugModeAction {
  option (package_info.v1.package_name) = "ubo_app.store.settings.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_settings_dot_types = 1000;
}

message SettingsEvent {
  option (package_info.v1.package_name) = "ubo_app.store.settings.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_settings_dot_types = 1000;
}

message SettingsSetDebugModeEvent {
  option (package_info.v1.package_name) = "ubo_app.store.settings.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_settings_dot_types = 1000;
  bool is_enabled = 2;
}

message SettingsState {
  option (package_info.v1.package_name) = "ubo_app.store.settings.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_settings_dot_types = 1000;
  optional bool is_debug_enabled = 2;
}

message IconState {
  option (package_info.v1.package_name) = "ubo_app.store.status_icons.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_status_icons_dot_types = 1000;
  string symbol = 2;
  string color = 3;
  int64 priority = 4;
  string id = 5;
}

message StatusIconsState {
  option (package_info.v1.package_name) = "ubo_app.store.status_icons.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_status_icons_dot_types = 1000;
  repeated IconState icons = 2;
}

message StatusIconsAction {
  option (package_info.v1.package_name) = "ubo_app.store.status_icons.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_status_icons_dot_types = 1000;
}

message StatusIconsRegisterAction {
  option (package_info.v1.package_name) = "ubo_app.store.status_icons.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_status_icons_dot_types = 1000;
  string icon = 2;
  optional string color = 3;
  optional int64 priority = 4;
  optional string id = 5;
}

enum UpdateStatus {
  UPDATE_STATUS_UBO_APP_DOT_STORE_DOT_UPDATE_MANAGER_DOT_TYPES_UNSPECIFIED = 0;
  UPDATE_STATUS_CHECKING = 1;
  UPDATE_STATUS_FAILED_TO_CHECK = 2;
  UPDATE_STATUS_UP_TO_DATE = 3;
  UPDATE_STATUS_OUTDATED = 4;
  UPDATE_STATUS_UPDATING = 5;
}

message UpdateManagerAction {
  option (package_info.v1.package_name) = "ubo_app.store.update_manager.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_update_manager_dot_types = 1000;
}

message UpdateManagerSetVersionsAction {
  option (package_info.v1.package_name) = "ubo_app.store.update_manager.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_update_manager_dot_types = 1000;
  bool flash_notification = 2;
  string current_version = 3;
  string base_image_variant = 4;
  string latest_version = 5;
  string serial_number = 6;
}

message UpdateManagerSetStatusAction {
  option (package_info.v1.package_name) = "ubo_app.store.update_manager.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_update_manager_dot_types = 1000;
  UpdateStatus status = 2;
}

message UpdateManagerSetUpdateServiceStatusAction {
  option (package_info.v1.package_name) = "ubo_app.store.update_manager.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_update_manager_dot_types = 1000;
  bool is_active = 2;
}

message UpdateManagerEvent {
  option (package_info.v1.package_name) = "ubo_app.store.update_manager.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_update_manager_dot_types = 1000;
}

message UpdateManagerCheckEvent {
  option (package_info.v1.package_name) = "ubo_app.store.update_manager.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_update_manager_dot_types = 1000;
}

message UpdateManagerUpdateEvent {
  option (package_info.v1.package_name) = "ubo_app.store.update_manager.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_update_manager_dot_types = 1000;
}

message UpdateManagerState {
  option (package_info.v1.package_name) = "ubo_app.store.update_manager.types";
  optional string meta_field_package_name_ubo_app_dot_store_dot_update_manager_dot_types = 1000;
  optional string serial_number = 2;
  optional string current_version = 3;
  optional string base_image_variant = 4;
  optional string latest_version = 5;
  optional UpdateStatus update_status = 6;
  optional bool is_update_service_active = 7;
}

enum AudioDevice {
  AUDIO_DEVICE_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_AUDIO_UNSPECIFIED = 0;
  AUDIO_DEVICE_INPUT = 1;
  AUDIO_DEVICE_OUTPUT = 2;
}

message AudioAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
}

message AudioSetVolumeAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  float volume = 2;
  AudioDevice device = 3;
}

message AudioChangeVolumeAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  float amount = 2;
  AudioDevice device = 3;
}

message AudioSetMuteStatusAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  bool is_mute = 2;
  AudioDevice device = 3;
}

message AudioToggleMuteStatusAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  AudioDevice device = 2;
}

message AudioPlayChimeAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  string name = 2;
}

message AudioPlayAudioAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  optional string id = 2;
  bytes sample = 3;
  int64 channels = 4;
  int64 rate = 5;
  int64 width = 6;
}

message AudioPlaybackDoneAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  string id = 2;
}

message AudioEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
}

message AudioPlayChimeEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  string name = 2;
}

message AudioPlayAudioEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  optional string id = 2;
  float volume = 3;
  bytes sample = 4;
  int64 channels = 5;
  int64 rate = 6;
  int64 width = 7;
}

message AudioPlaybackDoneEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  string id = 2;
}

message AudioState {
  option (package_info.v1.package_name) = "ubo_app.store.services.audio";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_audio = 1000;
  optional float playback_volume = 2;
  optional bool is_playback_mute = 3;
  optional float capture_volume = 4;
  optional bool is_capture_mute = 5;
}

message CameraAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.camera";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_camera = 1000;
}

message CameraStartViewfinderAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.camera";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_camera = 1000;
  string pattern = 2;
}

message CameraReportBarcodeAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.camera";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_camera = 1000;
  repeated string codes = 2;
}

message CameraEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.camera";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_camera = 1000;
}

message CameraStartViewfinderEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.camera";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_camera = 1000;
  string pattern = 2;
}

message CameraStopViewfinderEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.camera";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_camera = 1000;
  string id = 2;
}

message CameraState {
  option (package_info.v1.package_name) = "ubo_app.store.services.camera";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_camera = 1000;
  optional InputDescription current = 2;
  bool is_viewfinder_active = 3;
  repeated InputDescription queue = 4;
}

message DisplayAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.display";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_display = 1000;
}

message DisplayEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.display";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_display = 1000;
}

message DisplayPauseAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.display";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_display = 1000;
}

message DisplayResumeAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.display";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_display = 1000;
}

message DisplayRerenderEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.display";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_display = 1000;
}

message DisplayRenderEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.display";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_display = 1000;
  bytes data = 2;
  repeated int64 rectangle = 3;
  float density = 4;
}

message DisplayCompressedRenderEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.display";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_display = 1000;
  bytes compressed_data = 2;
  repeated int64 rectangle = 3;
  float density = 4;
}

message DisplayState {
  option (package_info.v1.package_name) = "ubo_app.store.services.display";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_display = 1000;
  optional bool is_paused = 2;
}

enum DockerStatus {
  DOCKER_STATUS_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_DOCKER_UNSPECIFIED = 0;
  DOCKER_STATUS_UNKNOWN = 1;
  DOCKER_STATUS_NOT_INSTALLED = 2;
  DOCKER_STATUS_INSTALLING = 3;
  DOCKER_STATUS_NOT_RUNNING = 4;
  DOCKER_STATUS_RUNNING = 5;
  DOCKER_STATUS_ERROR = 6;
}

enum DockerItemStatus {
  DOCKER_ITEM_STATUS_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_DOCKER_UNSPECIFIED = 0;
  DOCKER_ITEM_STATUS_NOT_AVAILABLE = 1;
  DOCKER_ITEM_STATUS_FETCHING = 2;
  DOCKER_ITEM_STATUS_AVAILABLE = 3;
  DOCKER_ITEM_STATUS_CREATED = 4;
  DOCKER_ITEM_STATUS_RUNNING = 5;
  DOCKER_ITEM_STATUS_ERROR = 6;
  DOCKER_ITEM_STATUS_PROCESSING = 7;
}

message DockerAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
}

message DockerSetStatusAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  DockerStatus status = 2;
}

message DockerStoreUsernameAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string registry = 2;
  string username = 3;
}

message DockerRemoveUsernameAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string registry = 2;
}

message DockerImageAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageSetStatusAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;

  message Ports {
    repeated string items = 1;
  }
  DockerItemStatus status = 2;
  optional Ports ports = 3;
  optional string ip = 4;
  string image = 5;
}

message DockerImageSetDockerIdAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string docker_id = 2;
  string image = 3;
}

message DockerImageFetchCompositionAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageFetchAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRemoveCompositionAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRemoveAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRunCompositionAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRunContainerAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageStopCompositionAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageStopContainerAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageReleaseCompositionAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRemoveContainerAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
}

message DockerLoadImagesEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
}

message DockerServiceState {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;

  message UsernamesDict {
    map<string, string> items = 1;
  }
  optional DockerStatus status = 2;
  optional UsernamesDict usernames = 3;
}

message DockerImageEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRegisterAppEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageFetchCompositionEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageFetchEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRemoveCompositionEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRemoveEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRunCompositionEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRunContainerEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageStopCompositionEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageStopContainerEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageReleaseCompositionEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message DockerImageRemoveContainerEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  string image = 2;
}

message ImageState {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;

  message Ports {
    repeated string items = 1;
  }
  string id = 2;
  string label = 3;
  string instructions = 4;
  optional DockerItemStatus status = 5;
  optional string container_ip = 6;
  optional string docker_id = 7;
  optional Ports ports = 8;
}

message DockerState {
  option (package_info.v1.package_name) = "ubo_app.store.services.docker";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_docker = 1000;
  DockerServiceState service = 2;
}

enum NetState {
  NET_STATE_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_ETHERNET_UNSPECIFIED = 0;
  NET_STATE_CONNECTED = 1;
  NET_STATE_DISCONNECTED = 2;
  NET_STATE_PENDING = 3;
  NET_STATE_NEEDS_ATTENTION = 4;
  NET_STATE_UNKNOWN = 5;
}

message IpAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.ip";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ip = 1000;
}

message IpEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.ip";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ip = 1000;
}

message IpUpdateInterfacesAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.ip";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ip = 1000;
  repeated IpNetworkInterface interfaces = 2;
}

message IpSetIsConnectedAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.ip";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ip = 1000;
  bool is_connected = 2;
}

message IpNetworkInterface {
  option (package_info.v1.package_name) = "ubo_app.store.services.ip";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ip = 1000;
  string name = 2;
  repeated string ip_addresses = 3;
}

message IpState {
  option (package_info.v1.package_name) = "ubo_app.store.services.ip";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ip = 1000;
  repeated IpNetworkInterface interfaces = 2;
  optional bool is_connected = 3;
}

enum Key {
  KEY_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_KEYPAD_UNSPECIFIED = 0;
  KEY_BACK = 1;
  KEY_HOME = 2;
  KEY_UP = 3;
  KEY_DOWN = 4;
  KEY_L1 = 5;
  KEY_L2 = 6;
  KEY_L3 = 7;
}

message KeypadAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.keypad";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_keypad = 1000;

  message PressedKeysSetType {
    repeated Key items = 1;
  }
  Key key = 2;
  PressedKeysSetType pressed_keys = 3;
  optional float time = 4;
}

message KeypadKeyUpAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.keypad";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_keypad = 1000;

  message PressedKeysSetType {
    repeated Key items = 1;
  }
  Key key = 2;
  PressedKeysSetType pressed_keys = 3;
  optional float time = 4;
}

message KeypadKeyDownAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.keypad";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_keypad = 1000;

  message PressedKeysSetType {
    repeated Key items = 1;
  }
  Key key = 2;
  PressedKeysSetType pressed_keys = 3;
  optional float time = 4;
}

message KeypadKeyPressAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.keypad";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_keypad = 1000;

  message PressedKeysSetType {
    repeated Key items = 1;
  }
  Key key = 2;
  PressedKeysSetType pressed_keys = 3;
  optional float time = 4;
}

message KeypadKeyReleaseAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.keypad";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_keypad = 1000;

  message PressedKeysSetType {
    repeated Key items = 1;
  }
  Key key = 2;
  PressedKeysSetType pressed_keys = 3;
  optional float time = 4;
}

message KeypadState {
  option (package_info.v1.package_name) = "ubo_app.store.services.keypad";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_keypad = 1000;
  optional int64 depth = 2;
}

message LightDMAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.lightdm";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_lightdm = 1000;
}

message LightDMUpdateStateAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.lightdm";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_lightdm = 1000;
  optional bool is_active = 2;
  optional bool is_enabled = 3;
  optional bool is_installed = 4;
  optional bool is_installing = 5;
}

message LightDMClearEnabledStateAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.lightdm";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_lightdm = 1000;
}

message LightDMState {
  option (package_info.v1.package_name) = "ubo_app.store.services.lightdm";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_lightdm = 1000;
  optional bool is_active = 2;
  optional bool is_enabled = 3;
  optional bool is_installed = 4;
  optional bool is_installing = 5;
}

enum Importance {
  IMPORTANCE_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_NOTIFICATIONS_UNSPECIFIED = 0;
  IMPORTANCE_CRITICAL = 1;
  IMPORTANCE_HIGH = 2;
  IMPORTANCE_MEDIUM = 3;
  IMPORTANCE_LOW = 4;
}

enum NotificationDisplayType {
  NOTIFICATION_DISPLAY_TYPE_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_NOTIFICATIONS_UNSPECIFIED = 0;
  NOTIFICATION_DISPLAY_TYPE_NOT_SET = 1;
  NOTIFICATION_DISPLAY_TYPE_BACKGROUND = 2;
  NOTIFICATION_DISPLAY_TYPE_FLASH = 3;
  NOTIFICATION_DISPLAY_TYPE_STICKY = 4;
}

enum Chime {
  CHIME_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_NOTIFICATIONS_UNSPECIFIED = 0;
  CHIME_ADD = 1;
  CHIME_DONE = 2;
  CHIME_FAILURE = 3;
  CHIME_VOLUME_CHANGE = 4;
}

message NotificationActionItem {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  optional string background_color = 2;
  optional bool dismiss_notification = 3;
  optional bool close_notification = 4;
  optional string key = 5;
  optional string label = 6;
  optional string color = 7;
  optional string icon = 8;
  optional bool is_short = 9;
  optional float opacity = 10;
  optional float progress = 11;
}

message NotificationDispatchItem {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  Action store_action = 2;
  optional string key = 3;
  optional string label = 4;
  optional string color = 5;
  optional string background_color = 6;
  optional string icon = 7;
  optional bool is_short = 8;
  optional float opacity = 9;
  optional float progress = 10;
  optional bool dismiss_notification = 11;
  optional bool close_notification = 12;
}

message Notification {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;

  message ActionsItem {
    oneof actions_item {
      NotificationActionItem notification_action_item = 1;
      NotificationDispatchItem notification_dispatch_item = 2;
    }
  }

  message Actions {
    repeated ActionsItem items = 1;
  }

  message OnClose {}
  optional string id = 2;
  string title = 3;
  string content = 4;
  optional ReadableInformation extra_information = 5;
  optional Importance importance = 6;
  optional Chime chime = 7;
  optional int64 timestamp = 8;
  optional bool is_read = 9;
  optional string sender = 10;
  optional Actions actions = 11;
  optional string icon = 12;
  optional string color = 13;
  optional int64 expiration_timestamp = 14;
  optional NotificationDisplayType display_type = 15;
  optional float flash_time = 16;
  optional bool show_dismiss_action = 17;
  optional bool dismiss_on_close = 18;
  optional OnClose on_close = 19;
  optional bool blink = 20;
  optional float progress = 21;
  optional float progress_weight = 22;
}

message NotificationsAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
}

message NotificationsAddAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  Notification notification = 2;
}

message NotificationsDisplayAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  Notification notification = 2;
  optional int64 index = 3;
  optional int64 count = 4;
}

message NotificationsClearAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  Notification notification = 2;
}

message NotificationsClearByIdAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  string id = 2;
}

message NotificationsClearAllAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
}

message NotificationsEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
}

message NotificationsClearEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  Notification notification = 2;
}

message NotificationsDisplayEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  Notification notification = 2;
  optional int64 index = 3;
  optional int64 count = 4;
}

message NotificationsState {
  option (package_info.v1.package_name) = "ubo_app.store.services.notifications";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_notifications = 1000;
  repeated Notification notifications = 2;
  int64 unread_count = 3;
  optional float progress = 4;
}

message RgbRingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
}

message RgbRingEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
}

message RgbRingSetIsConnectedAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional bool is_connected = 2;
}

message RgbRingSetIsBusyAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional bool is_busy = 2;
}

message RgbRingCommandAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
}

message RgbRingWaitableCommandAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional int64 wait = 2;
}

message RgbRingColorfulCommandAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional RgbColor color = 2;
}

message RgbRingSetEnabledAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional bool enabled = 2;
}

message RgbRingSetAllAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional RgbColor color = 2;
}

message RgbRingSetBrightnessAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional float brightness = 2;
}

message RgbRingBlankAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
}

message RgbRingRainbowAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  int64 rounds = 2;
  optional int64 wait = 3;
}

message RgbRingProgressWheelStepAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional RgbColor color = 2;
}

message RgbRingPulseAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional int64 repetitions = 2;
  optional int64 wait = 3;
  optional RgbColor color = 4;
}

message RgbRingBlinkAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional int64 repetitions = 2;
  optional int64 wait = 3;
  optional RgbColor color = 4;
}

message RgbRingSpinningWheelAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional int64 length = 2;
  optional int64 repetitions = 3;
  optional int64 wait = 4;
  optional RgbColor color = 5;
}

message RgbRingProgressWheelAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional float percentage = 2;
  optional RgbColor color = 3;
}

message RgbRingFillUptoAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional float percentage = 2;
  optional int64 wait = 3;
  optional RgbColor color = 4;
}

message RgbRingFillDownfromAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  optional float percentage = 2;
  optional int64 wait = 3;
  optional RgbColor color = 4;
}

message RgbRingCommandEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  repeated string command = 2;
}

message RgbRingState {
  option (package_info.v1.package_name) = "ubo_app.store.services.rgb_ring";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rgb_ring = 1000;
  bool is_connected = 2;
  bool is_busy = 3;
}

message RgbColorElement {
  oneof rgb_color_element {
    float float = 1;
    int64 int64 = 2;
  }
}

message RgbColor {
  repeated RgbColorElement items = 1;
}
message RPiConnectAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
}

message RPiConnectEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
}

message RPiConnectStartDownloadingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
}

message RPiConnectDoneDownloadingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
}

message RPiConnectSetPendingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
}

message RPiConnectStatus {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
  int64 screen_sharing_sessions = 2;
  int64 remote_shell_sessions = 3;
}

message RPiConnectSetStatusAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
  bool is_installed = 2;
  bool is_signed_in = 3;
  RPiConnectStatus status = 4;
}

message RPiConnectLoginEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
}

message RPiConnectUpdateServiceStateAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
  optional bool is_active = 2;
}

message RPiConnectState {
  option (package_info.v1.package_name) = "ubo_app.store.services.rpi_connect";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_rpi_connect = 1000;
  optional bool is_downloading = 2;
  optional bool is_active = 3;
  optional bool is_installed = 4;
  optional bool is_signed_in = 5;
  optional RPiConnectStatus status = 6;
}

enum Sensor {
  SENSOR_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_SENSORS_UNSPECIFIED = 0;
  SENSOR_TEMPERATURE = 1;
  SENSOR_LIGHT = 2;
}

message SensorsAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.sensors";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_sensors = 1000;
}

message SensorsReportReadingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.sensors";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_sensors = 1000;
  Sensor sensor = 2;
  float reading = 3;
  int64 timestamp = 4;
}

message SensorState {
  option (package_info.v1.package_name) = "ubo_app.store.services.sensors";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_sensors = 1000;
  optional float value = 2;
}

message SensorsState {
  option (package_info.v1.package_name) = "ubo_app.store.services.sensors";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_sensors = 1000;
  optional SensorState temperature = 2;
  optional SensorState light = 3;
}

message SSHAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.ssh";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ssh = 1000;
}

message SSHUpdateStateAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.ssh";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ssh = 1000;
  optional bool is_active = 2;
  optional bool is_enabled = 3;
}

message SSHClearEnabledStateAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.ssh";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ssh = 1000;
}

message SSHState {
  option (package_info.v1.package_name) = "ubo_app.store.services.ssh";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_ssh = 1000;
  optional bool is_active = 2;
  optional bool is_enabled = 3;
}

message UsersAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
}

message UsersSetUsersAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
  repeated UserState users = 2;
}

message UsersCreateUserAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
}

message UsersDeleteUserAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
  string id = 2;
}

message UsersResetPasswordAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
  string id = 2;
}

message UsersEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
}

message UsersCreateUserEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
}

message UsersDeleteUserEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
  string id = 2;
}

message UsersResetPasswordEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
  string id = 2;
}

message UserState {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;
  string id = 2;
  bool is_removable = 3;
}

message UsersState {
  option (package_info.v1.package_name) = "ubo_app.store.services.users";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_users = 1000;

  message Users {
    repeated UserState items = 1;
  }
  optional Users users = 2;
}

enum VoiceEngine {
  VOICE_ENGINE_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_VOICE_UNSPECIFIED = 0;
  VOICE_ENGINE_PIPER = 1;
  VOICE_ENGINE_PICOVOICE = 2;
}

message VoiceAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.voice";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_voice = 1000;
}

message VoiceEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.voice";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_voice = 1000;
}

message VoiceUpdateAccessKeyStatus {
  option (package_info.v1.package_name) = "ubo_app.store.services.voice";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_voice = 1000;
  bool is_access_key_set = 2;
}

message VoiceSetEngineAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.voice";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_voice = 1000;
  VoiceEngine engine = 2;
}

message ReadableInformation {
  option (package_info.v1.package_name) = "ubo_app.store.services.voice";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_voice = 1000;
  string text = 2;
  optional string piper_text = 3;
  optional string picovoice_text = 4;
}

message VoiceReadTextAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.voice";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_voice = 1000;
  ReadableInformation information = 2;
  optional float speech_rate = 3;
  optional VoiceEngine engine = 4;
}

message VoiceSynthesizeTextEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.voice";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_voice = 1000;
  ReadableInformation information = 2;
  optional float speech_rate = 3;
}

message VoiceState {
  option (package_info.v1.package_name) = "ubo_app.store.services.voice";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_voice = 1000;
  optional bool is_access_key_set = 2;
  optional VoiceEngine selected_engine = 3;
}

message VSCodeAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
}

message VSCodeEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
}

message VSCodeStartDownloadingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
}

message VSCodeDoneDownloadingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
}

message VSCodeSetPendingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
}

message VSCodeStatus {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
  bool is_service_installed = 2;
  bool is_running = 3;
  string name = 4;
}

message VSCodeSetStatusAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
  bool is_binary_installed = 2;
  bool is_logged_in = 3;
  VSCodeStatus status = 4;
}

message VSCodeLoginEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
}

message VSCodeRestartEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
}

message VSCodeState {
  option (package_info.v1.package_name) = "ubo_app.store.services.vscode";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_vscode = 1000;
  optional bool is_pending = 2;
  optional bool is_downloading = 3;
  optional bool is_binary_installed = 4;
  optional bool is_logged_in = 5;
  optional VSCodeStatus status = 6;
}

message WebUIEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.web_ui";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_web_ui = 1000;
}

message WebUIInitializeEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.web_ui";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_web_ui = 1000;
  InputDescription description = 2;
}

message WebUIStopEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.web_ui";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_web_ui = 1000;
}

message WebUIState {
  option (package_info.v1.package_name) = "ubo_app.store.services.web_ui";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_web_ui = 1000;
  repeated InputDescription active_inputs = 2;
}

enum WiFiType {
  WI_FI_TYPE_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_WIFI_UNSPECIFIED = 0;
  WI_FI_TYPE_WEP = 1;
  WI_FI_TYPE_WPA = 2;
  WI_FI_TYPE_WPA2 = 3;
  WI_FI_TYPE_NOPASS = 4;
}

enum ConnectionState {
  CONNECTION_STATE_UBO_APP_DOT_STORE_DOT_SERVICES_DOT_WIFI_UNSPECIFIED = 0;
  CONNECTION_STATE_CONNECTED = 1;
  CONNECTION_STATE_CONNECTING = 2;
  CONNECTION_STATE_DISCONNECTED = 3;
  CONNECTION_STATE_UNKNOWN = 4;
}

message WiFiConnection {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
  string ssid = 2;
  optional ConnectionState state = 3;
  optional int64 signal_strength = 4;
  optional string password = 5;
  optional WiFiType type = 6;
  optional bool hidden = 7;
}

message WiFiAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
}

message WiFiInputConnectionAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
}

message WiFiSetHasVisitedOnboardingAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
  bool has_visited_onboarding = 2;
}

message WiFiUpdateAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
  repeated WiFiConnection connections = 2;
  NetState state = 3;
  WiFiConnection current_connection = 4;
}

message WiFiUpdateRequestAction {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
  optional bool reset = 2;
}

message WiFiEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
}

message WiFiInputConnectionEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
}

message WiFiUpdateRequestEvent {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
}

message WiFiState {
  option (package_info.v1.package_name) = "ubo_app.store.services.wifi";
  optional string meta_field_package_name_ubo_app_dot_store_dot_services_dot_wifi = 1000;
  repeated WiFiConnection connections = 2;
  NetState state = 3;
  WiFiConnection current_connection = 4;
  optional bool has_visited_onboarding = 5;
}

message Action {
  oneof action {
    AudioAction audio_action = 1;
    AudioChangeVolumeAction audio_change_volume_action = 2;
    AudioPlayAudioAction audio_play_audio_action = 3;
    AudioPlayChimeAction audio_play_chime_action = 4;
    AudioPlaybackDoneAction audio_playback_done_action = 5;
    AudioSetMuteStatusAction audio_set_mute_status_action = 6;
    AudioSetVolumeAction audio_set_volume_action = 7;
    AudioToggleMuteStatusAction audio_toggle_mute_status_action = 8;
    CameraAction camera_action = 9;
    CameraReportBarcodeAction camera_report_barcode_action = 10;
    CameraStartViewfinderAction camera_start_viewfinder_action = 11;
    CloseApplicationAction close_application_action = 12;
    DeregisterRegularAppAction deregister_regular_app_action = 13;
    DisplayAction display_action = 14;
    DisplayPauseAction display_pause_action = 15;
    DisplayResumeAction display_resume_action = 16;
    DockerAction docker_action = 17;
    DockerImageAction docker_image_action = 18;
    DockerImageFetchAction docker_image_fetch_action = 19;
    DockerImageFetchCompositionAction docker_image_fetch_composition_action = 20;
    DockerImageReleaseCompositionAction docker_image_release_composition_action = 21;
    DockerImageRemoveAction docker_image_remove_action = 22;
    DockerImageRemoveCompositionAction docker_image_remove_composition_action = 23;
    DockerImageRemoveContainerAction docker_image_remove_container_action = 24;
    DockerImageRunCompositionAction docker_image_run_composition_action = 25;
    DockerImageRunContainerAction docker_image_run_container_action = 26;
    DockerImageSetDockerIdAction docker_image_set_docker_id_action = 27;
    DockerImageSetStatusAction docker_image_set_status_action = 28;
    DockerImageStopCompositionAction docker_image_stop_composition_action = 29;
    DockerImageStopContainerAction docker_image_stop_container_action = 30;
    DockerRemoveUsernameAction docker_remove_username_action = 31;
    DockerSetStatusAction docker_set_status_action = 32;
    DockerStoreUsernameAction docker_store_username_action = 33;
    InputAction input_action = 34;
    InputCancelAction input_cancel_action = 35;
    InputDemandAction input_demand_action = 36;
    InputProvideAction input_provide_action = 37;
    InputResolveAction input_resolve_action = 38;
    IpAction ip_action = 39;
    IpSetIsConnectedAction ip_set_is_connected_action = 40;
    IpUpdateInterfacesAction ip_update_interfaces_action = 41;
    KeypadAction keypad_action = 42;
    KeypadKeyDownAction keypad_key_down_action = 43;
    KeypadKeyPressAction keypad_key_press_action = 44;
    KeypadKeyReleaseAction keypad_key_release_action = 45;
    KeypadKeyUpAction keypad_key_up_action = 46;
    LightDMAction light_dm_action = 47;
    LightDMClearEnabledStateAction light_dm_clear_enabled_state_action = 48;
    LightDMUpdateStateAction light_dm_update_state_action = 49;
    MainAction main_action = 50;
    MenuAction menu_action = 51;
    MenuChooseByIconAction menu_choose_by_icon_action = 52;
    MenuChooseByIndexAction menu_choose_by_index_action = 53;
    MenuChooseByLabelAction menu_choose_by_label_action = 54;
    MenuGoBackAction menu_go_back_action = 55;
    MenuGoHomeAction menu_go_home_action = 56;
    MenuScrollAction menu_scroll_action = 57;
    NotificationsAction notifications_action = 58;
    NotificationsAddAction notifications_add_action = 59;
    NotificationsClearAction notifications_clear_action = 60;
    NotificationsClearAllAction notifications_clear_all_action = 61;
    NotificationsClearByIdAction notifications_clear_by_id_action = 62;
    NotificationsDisplayAction notifications_display_action = 63;
    OpenApplicationAction open_application_action = 64;
    PowerAction power_action = 65;
    PowerOffAction power_off_action = 66;
    RPiConnectAction r_pi_connect_action = 67;
    RPiConnectDoneDownloadingAction r_pi_connect_done_downloading_action = 68;
    RPiConnectSetPendingAction r_pi_connect_set_pending_action = 69;
    RPiConnectSetStatusAction r_pi_connect_set_status_action = 70;
    RPiConnectStartDownloadingAction r_pi_connect_start_downloading_action = 71;
    RPiConnectUpdateServiceStateAction r_pi_connect_update_service_state_action = 72;
    RebootAction reboot_action = 73;
    RegisterAppAction register_app_action = 74;
    RegisterRegularAppAction register_regular_app_action = 75;
    RegisterSettingAppAction register_setting_app_action = 76;
    ReplayRecordedSequenceAction replay_recorded_sequence_action = 77;
    ReportReplayingDoneAction report_replaying_done_action = 78;
    RgbRingAction rgb_ring_action = 79;
    RgbRingBlankAction rgb_ring_blank_action = 80;
    RgbRingBlinkAction rgb_ring_blink_action = 81;
    RgbRingColorfulCommandAction rgb_ring_colorful_command_action = 82;
    RgbRingCommandAction rgb_ring_command_action = 83;
    RgbRingFillDownfromAction rgb_ring_fill_downfrom_action = 84;
    RgbRingFillUptoAction rgb_ring_fill_upto_action = 85;
    RgbRingProgressWheelAction rgb_ring_progress_wheel_action = 86;
    RgbRingProgressWheelStepAction rgb_ring_progress_wheel_step_action = 87;
    RgbRingPulseAction rgb_ring_pulse_action = 88;
    RgbRingRainbowAction rgb_ring_rainbow_action = 89;
    RgbRingSetAllAction rgb_ring_set_all_action = 90;
    RgbRingSetBrightnessAction rgb_ring_set_brightness_action = 91;
    RgbRingSetEnabledAction rgb_ring_set_enabled_action = 92;
    RgbRingSetIsBusyAction rgb_ring_set_is_busy_action = 93;
    RgbRingSetIsConnectedAction rgb_ring_set_is_connected_action = 94;
    RgbRingSpinningWheelAction rgb_ring_spinning_wheel_action = 95;
    RgbRingWaitableCommandAction rgb_ring_waitable_command_action = 96;
    SSHAction ssh_action = 97;
    SSHClearEnabledStateAction ssh_clear_enabled_state_action = 98;
    SSHUpdateStateAction ssh_update_state_action = 99;
    SensorsAction sensors_action = 100;
    SensorsReportReadingAction sensors_report_reading_action = 101;
    SetAreEnclosuresVisibleAction set_are_enclosures_visible_action = 102;
    SetMenuPathAction set_menu_path_action = 103;
    SettingsAction settings_action = 104;
    SettingsToggleDebugModeAction settings_toggle_debug_mode_action = 105;
    StatusIconsAction status_icons_action = 106;
    StatusIconsRegisterAction status_icons_register_action = 107;
    ToggleRecordingAction toggle_recording_action = 108;
    UpdateManagerAction update_manager_action = 109;
    UpdateManagerSetStatusAction update_manager_set_status_action = 110;
    UpdateManagerSetUpdateServiceStatusAction update_manager_set_update_service_status_action = 111;
    UpdateManagerSetVersionsAction update_manager_set_versions_action = 112;
    UsersAction users_action = 113;
    UsersCreateUserAction users_create_user_action = 114;
    UsersDeleteUserAction users_delete_user_action = 115;
    UsersResetPasswordAction users_reset_password_action = 116;
    UsersSetUsersAction users_set_users_action = 117;
    VSCodeAction vs_code_action = 118;
    VSCodeDoneDownloadingAction vs_code_done_downloading_action = 119;
    VSCodeSetPendingAction vs_code_set_pending_action = 120;
    VSCodeSetStatusAction vs_code_set_status_action = 121;
    VSCodeStartDownloadingAction vs_code_start_downloading_action = 122;
    VoiceAction voice_action = 123;
    VoiceReadTextAction voice_read_text_action = 124;
    VoiceSetEngineAction voice_set_engine_action = 125;
    WiFiAction wi_fi_action = 126;
    WiFiInputConnectionAction wi_fi_input_connection_action = 127;
    WiFiSetHasVisitedOnboardingAction wi_fi_set_has_visited_onboarding_action = 128;
    WiFiUpdateAction wi_fi_update_action = 129;
    WiFiUpdateRequestAction wi_fi_update_request_action = 130;
  }
}

message Event {
  oneof event {
    AudioEvent audio_event = 1;
    AudioPlayAudioEvent audio_play_audio_event = 2;
    AudioPlayChimeEvent audio_play_chime_event = 3;
    AudioPlaybackDoneEvent audio_playback_done_event = 4;
    CameraEvent camera_event = 5;
    CameraStartViewfinderEvent camera_start_viewfinder_event = 6;
    CameraStopViewfinderEvent camera_stop_viewfinder_event = 7;
    CloseApplicationEvent close_application_event = 8;
    DisplayCompressedRenderEvent display_compressed_render_event = 9;
    DisplayEvent display_event = 10;
    DisplayRenderEvent display_render_event = 11;
    DisplayRerenderEvent display_rerender_event = 12;
    DockerEvent docker_event = 13;
    DockerImageEvent docker_image_event = 14;
    DockerImageFetchCompositionEvent docker_image_fetch_composition_event = 15;
    DockerImageFetchEvent docker_image_fetch_event = 16;
    DockerImageRegisterAppEvent docker_image_register_app_event = 17;
    DockerImageReleaseCompositionEvent docker_image_release_composition_event = 18;
    DockerImageRemoveCompositionEvent docker_image_remove_composition_event = 19;
    DockerImageRemoveContainerEvent docker_image_remove_container_event = 20;
    DockerImageRemoveEvent docker_image_remove_event = 21;
    DockerImageRunCompositionEvent docker_image_run_composition_event = 22;
    DockerImageRunContainerEvent docker_image_run_container_event = 23;
    DockerImageStopCompositionEvent docker_image_stop_composition_event = 24;
    DockerImageStopContainerEvent docker_image_stop_container_event = 25;
    DockerLoadImagesEvent docker_load_images_event = 26;
    InitEvent init_event = 27;
    InputCancelEvent input_cancel_event = 28;
    InputProvideEvent input_provide_event = 29;
    InputResolveEvent input_resolve_event = 30;
    IpEvent ip_event = 31;
    MainEvent main_event = 32;
    MenuChooseByIconEvent menu_choose_by_icon_event = 33;
    MenuChooseByIndexEvent menu_choose_by_index_event = 34;
    MenuChooseByLabelEvent menu_choose_by_label_event = 35;
    MenuEvent menu_event = 36;
    MenuGoBackEvent menu_go_back_event = 37;
    MenuGoHomeEvent menu_go_home_event = 38;
    MenuScrollEvent menu_scroll_event = 39;
    NotificationsClearEvent notifications_clear_event = 40;
    NotificationsDisplayEvent notifications_display_event = 41;
    NotificationsEvent notifications_event = 42;
    OpenApplicationEvent open_application_event = 43;
    PowerEvent power_event = 44;
    PowerOffEvent power_off_event = 45;
    RPiConnectEvent r_pi_connect_event = 46;
    RPiConnectLoginEvent r_pi_connect_login_event = 47;
    RebootEvent reboot_event = 48;
    ReplayRecordedSequenceEvent replay_recorded_sequence_event = 49;
    RgbRingCommandEvent rgb_ring_command_event = 50;
    RgbRingEvent rgb_ring_event = 51;
    ScreenshotEvent screenshot_event = 52;
    SettingsEvent settings_event = 53;
    SettingsSetDebugModeEvent settings_set_debug_mode_event = 54;
    SnapshotEvent snapshot_event = 55;
    StoreRecordedSequenceEvent store_recorded_sequence_event = 56;
    UpdateManagerCheckEvent update_manager_check_event = 57;
    UpdateManagerEvent update_manager_event = 58;
    UpdateManagerUpdateEvent update_manager_update_event = 59;
    UsersCreateUserEvent users_create_user_event = 60;
    UsersDeleteUserEvent users_delete_user_event = 61;
    UsersEvent users_event = 62;
    UsersResetPasswordEvent users_reset_password_event = 63;
    VSCodeEvent vs_code_event = 64;
    VSCodeLoginEvent vs_code_login_event = 65;
    VSCodeRestartEvent vs_code_restart_event = 66;
    VoiceEvent voice_event = 67;
    VoiceSynthesizeTextEvent voice_synthesize_text_event = 68;
    WebUIEvent web_ui_event = 69;
    WebUIInitializeEvent web_ui_initialize_event = 70;
    WebUIStopEvent web_ui_stop_event = 71;
    WiFiEvent wi_fi_event = 72;
    WiFiInputConnectionEvent wi_fi_input_connection_event = 73;
    WiFiUpdateRequestEvent wi_fi_update_request_event = 74;
  }
}
